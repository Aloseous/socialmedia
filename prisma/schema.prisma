generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String          @id @map("_id")
  email                 String          @unique
  username              String?
  avatar                String?
  cover                 String?
  name                  String?
  surname               String?
  desc                  String?
  city                  String?
  school                String?
  work                  String?
  website               String?
  createdAt             DateTime        @default(now())
  posts                 Post[]
  comments              Comment[]
  likes                 Like[]
  follower              Follower[]      @relation("Followers")
  following             Follower[]      @relation("Following")
  followRequestSend     FollowRequest[] @relation("FriendRequestSend")
  friendRequestReceived FollowRequest[] @relation("FriendRequestReceived")
  blockSend             Block[]         @relation("BlockSend")
  blockReceived         Block[]         @relation("BlockReceived")
  stories               Story[]
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  img       String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  likes     Like[]
  comments  Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  likes     Like[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?  @db.ObjectId
  // comment   Comment? @relation("CommentLikes", fields: [commentId], references: [id], onDelete: Cascade)
  // commentId String?  @db.ObjectId
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?  @db.ObjectId
}

model Follower {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  follower    User     @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
}

model FollowRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  sender     User     @relation("FriendRequestSend", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  received   User     @relation("FriendRequestReceived", fields: [receivedId], references: [id], onDelete: Cascade)
  receivedId String

  @@unique([senderId, receivedId])
}

model Block {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  blocker   User     @relation("BlockSend", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked   User     @relation("BlockReceived", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String

  @@unique([blockerId, blockedId])
}

model Story {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  img       String
  createdAt DateTime @default(now())
  expiresAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
}
